name: ci

on:
  push:
    branches:
      - "main"

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # Filesystem/Code Security Scan
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the pipeline yet, just collect results

      - name: Upload filesystem scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

      # Secret Detection
      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'secret'
          format: 'sarif'
          output: 'trivy-secret-results.sarif'
          exit-code: '1'  # Fail on secrets

      - name: Upload secret scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-secret-results.sarif'
          category: 'trivy-secrets'

      # Infrastructure as Code Scan
      - name: Run Trivy config scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'  # Don't fail, just report
        continue-on-error: true  # Don't fail if no config files found

      - name: Upload config scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-config-results.sarif') != ''
        with:
          sarif_file: 'trivy-config-results.sarif'
          category: 'trivy-config'

      # License Detection
      - name: Run Trivy license scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'license'
          format: 'table'
        continue-on-error: true

      # Generate comprehensive security report
      - name: Generate security summary
        if: always()
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Filesystem/Code Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          trivy fs --format table --severity HIGH,CRITICAL . >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No critical/high vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "### Configuration Issues" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          trivy config --format table --severity HIGH,CRITICAL . >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No critical/high config issues found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  build:
    runs-on: ubuntu-latest
    environment: test
    needs: security-scan
    permissions:
      contents: write
      packages: write
    outputs:
      should_build: ${{ steps.version.outputs.should_build }}
      tag: ${{ steps.version.outputs.tag }}
      sha: ${{ steps.commit.outputs.sha }}
      msg: ${{ steps.commit.outputs.msg }}
      build_date: ${{ steps.date.outputs.build_date }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: commit
        run: |
          MSG=$(git log -1 --pretty=%B)
          SHA=$(git rev-parse --short HEAD)
          echo "Commit message: $MSG"
          echo "Commit SHA: $SHA"
          echo "msg=$MSG" >> $GITHUB_OUTPUT
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - id: version
        run: |
          if [[ "${{ steps.commit.outputs.msg }}" == "version:"* ]]; then
            # Extract version directly from commit message
            NEW_TAG="v$(echo "${{ steps.commit.outputs.msg }}" | cut -d':' -f2 | tr -d '[:space:]')"
          else
            CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Current tag: $CURRENT_TAG"
            IFS='.' read -r MAJOR MINOR PATCH <<< "${CURRENT_TAG#v}"
            echo "Current version: $MAJOR.$MINOR.$PATCH"
            
            case "${{ steps.commit.outputs.msg }}" in
              major:*) 
                NEW_TAG="v$((MAJOR + 1)).0.0"
                echo "Major version bump" ;;
              minor:*) 
                NEW_TAG="v$MAJOR.$((MINOR + 1)).0"
                echo "Minor version bump" ;;
              release:*) 
                NEW_TAG="v$MAJOR.$MINOR.$((PATCH + 1))"
                echo "Patch version bump" ;;
              base:*)
                NEW_TAG=""
                echo "Base image update - no version bump needed" ;;
              *) 
                NEW_TAG=""
                echo "No version bump needed" ;;
            esac
          fi

          # Set should_build for version bumps or base image updates
          if [ ! -z "$NEW_TAG" ]; then
            # Keep incrementing patch version until we find an available tag
            while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
              echo "Tag $NEW_TAG exists, incrementing patch"
              IFS='.' read -r M N P <<< "${NEW_TAG#v}"
              NEW_TAG="v$M.$N.$((P + 1))"
            done
            
            echo "Creating new tag: $NEW_TAG"
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag $NEW_TAG
            git push origin $NEW_TAG
            echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.commit.outputs.msg }}" == "base:"* ]]; then
            echo "Base image update detected"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "No tag created, building with latest"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.version.outputs.should_build == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          buildkitd-flags: --debug

      - name: Cache Docker layers
        if: steps.version.outputs.should_build == 'true'
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        if: steps.version.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Debug commit message for base image
        run: |
          echo "Commit message: '${{ steps.commit.outputs.msg }}'"
          echo "Should build: ${{ steps.version.outputs.should_build }}"
          echo "Starts with 'base:': ${{ startsWith(steps.commit.outputs.msg, 'base:') }}"
          echo "Combined condition: ${{ steps.version.outputs.should_build == 'true' && startsWith(steps.commit.outputs.msg, 'base:') }}"

      - name: Build & Push Base Image (if changed)
        if: startsWith(steps.commit.outputs.msg, 'base:')
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: Dockerfile.base
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}-base:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          platforms: linux/amd64,linux/arm64
          provenance: false
          sbom: false
          compression: zstd
          push-quiet: true

      - name: Generate Build Date
        if: steps.version.outputs.should_build == 'true'
        id: date
        run: echo "build_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

      - name: Create build info
        if: steps.version.outputs.should_build == 'true'
        run: |
          echo '{
            "version": "${{ steps.version.outputs.tag }}",
            "commit_sha": "${{ steps.commit.outputs.sha }}",
            "build_date": "${{ steps.date.outputs.build_date }}"
          }' > $GITHUB_WORKSPACE/buildinfo.json
          echo "Created buildinfo.json with content:"
          cat $GITHUB_WORKSPACE/buildinfo.json
      
      - name: Build and push
        if: steps.version.outputs.should_build == 'true'
        id: build
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION_TAG=${{ steps.version.outputs.tag }}
            COMMIT_SHA=${{ steps.commit.outputs.sha }}
            BUILD_DATE=${{ steps.date.outputs.build_date }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ steps.version.outputs.tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:latest
          platforms: linux/amd64,linux/arm64
          provenance: false
          sbom: false
          compression: zstd
          push-quiet: true

  container-security:
    name: Container Security Scanning
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_build == 'true'
    steps:
      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ needs.build.outputs.tag }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true  # Don't fail if image doesn't exist yet

      - name: Check if SARIF file exists
        id: check-sarif
        run: |
          if [ -f "trivy-image-results.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "Creating empty SARIF file"
            cat > trivy-image-results.sarif << EOF
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Trivy",
                    "version": "0.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi

      - name: Upload image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-container'

      # Generate SBOM for the container
      - name: Generate SBOM for container
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ needs.build.outputs.tag }}'
          format: 'spdx-json'
          output: 'sbom.spdx.json'
        continue-on-error: true

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('sbom.spdx.json') != ''
        with:
          name: sbom
          path: sbom.spdx.json

      # Critical vulnerability check - fail if found
      - name: Check for critical vulnerabilities
        run: |
          if [ -f "trivy-image-results.sarif" ] && [ "${{ steps.check-sarif.outputs.sarif_exists }}" == "true" ]; then
            trivy image --format json --severity CRITICAL '${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ needs.build.outputs.tag }}' > vuln-report.json 2>/dev/null || echo '{"Results":[]}' > vuln-report.json
            CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' vuln-report.json)
            
            echo "Critical vulnerabilities found: $CRITICAL_COUNT"
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Critical vulnerabilities found in container image!"
              echo "## Critical Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
              jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL") | "- \(.VulnerabilityID): \(.Title)"' vuln-report.json >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "✅ No critical vulnerabilities found"
              echo "## Container Security ✅" >> $GITHUB_STEP_SUMMARY
              echo "No critical vulnerabilities found in the container image." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Container image scan skipped - image may not be available"
            echo "## Container Security ⚠️" >> $GITHUB_STEP_SUMMARY
            echo "Container security scan was skipped because the image could not be scanned." >> $GITHUB_STEP_SUMMARY
          fi

  deploy:
    name: Deploy
    needs: [build, container-security]
    runs-on: ubuntu-latest
    if: always() && needs.build.outputs.should_build == 'true' && needs.container-security.result == 'success'
    steps:
      # Create GitHub Release
      - name: Create GitHub Release
        if: needs.build.outputs.tag != 'latest'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.tag }}
          release_name: Release ${{ needs.build.outputs.tag }}
          body: |
            ## Changes in ${{ needs.build.outputs.tag }}
            
            **Commit:** ${{ needs.build.outputs.sha }}
            **Build Date:** ${{ needs.build.outputs.build_date }}
            **Commit Message:** ${{ needs.build.outputs.msg }}
            
            ### Security Status ✅
            - Filesystem scan: Passed
            - Secret scan: Passed  
            - Configuration scan: Passed
            - Container scan: Passed
            
            ### Docker Images
            - `${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:${{ needs.build.outputs.tag }}`
            - `${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME }}:latest`
            
            ### Platforms
            - linux/amd64
            - linux/arm64
          draft: false
          prerelease: false

      # Update Docker Stack via Portainer Webhook
      - name: Update Docker Stack
        run: |
          curl -X POST ${{ secrets.PORTAINER_STACK_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{"tag": "${{ needs.build.outputs.tag }}", "commit": "${{ needs.build.outputs.sha }}"}'
        continue-on-error: true

  notify:
    name: Notifications
    needs: [security-scan, build, container-security, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.security-scan.result }}" == "failure" || "${{ needs.container-security.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=🚨 Security scan failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Build failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Pipeline completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "message=⚠️ Pipeline completed with warnings" >> $GITHUB_OUTPUT
          fi

      - name: Security notification
        if: needs.security-scan.result == 'failure' || needs.container-security.result == 'failure'
        run: |
          echo "## 🚨 Security Alert" >> $GITHUB_STEP_SUMMARY
          echo "Security vulnerabilities were detected in this pipeline run." >> $GITHUB_STEP_SUMMARY
          echo "Please review the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      # Move cache (cleanup)
      - name: Move cache
        if: needs.build.outputs.should_build == 'true'
        run: |
          rm -rf /tmp/.buildx-cache
          if [ -d "/tmp/.buildx-cache-new" ]; then
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          else
            echo "No new cache directory found, skipping cache move"
          fi